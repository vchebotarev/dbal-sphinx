<?php

namespace Chebur\DBALSphinx\Platforms;

use Chebur\DBALSphinx\Platforms\Keywords\SphinxKeywords;
use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Platforms\AbstractPlatform;
use Doctrine\DBAL\Platforms\TrimMode;
use Doctrine\DBAL\Schema\Column;
use Doctrine\DBAL\Schema\ColumnDiff;
use Doctrine\DBAL\Schema\Constraint;
use Doctrine\DBAL\Schema\ForeignKeyConstraint;
use Doctrine\DBAL\Schema\Identifier;
use Doctrine\DBAL\Schema\Index;
use Doctrine\DBAL\Schema\Sequence;
use Doctrine\DBAL\Schema\Table;
use Doctrine\DBAL\Schema\TableDiff;
use Doctrine\DBAL\Types\Type;

//class SphinxPlatform extends MySqlPlatform
class SphinxPlatform extends AbstractPlatform
{
    /**
     * @inheritdoc
     */
    public function getName()
    {
        return 'sphinx';
    }

    /**
     * {@inheritDoc}
     */
    protected function getReservedKeywordsClass()
    {
        return SphinxKeywords::class;
    }

    /**
     * @inheritDoc
     */
    public function getBooleanTypeDeclarationSQL(array $columnDef)
    {
        // TODO: Implement getBooleanTypeDeclarationSQL() method.
    }

    /**
     * @inheritDoc
     */
    public function getIntegerTypeDeclarationSQL(array $columnDef)
    {
        // TODO: Implement getIntegerTypeDeclarationSQL() method.
    }

    /**
     * @inheritDoc
     */
    public function getBigIntTypeDeclarationSQL(array $columnDef)
    {
        // TODO: Implement getBigIntTypeDeclarationSQL() method.
    }

    /**
     * @inheritDoc
     */
    public function getSmallIntTypeDeclarationSQL(array $columnDef)
    {
        // TODO: Implement getSmallIntTypeDeclarationSQL() method.
    }

    /**
     * @inheritDoc
     */
    protected function _getCommonIntegerTypeDeclarationSQL(array $columnDef)
    {
        // TODO: Implement _getCommonIntegerTypeDeclarationSQL() method.
    }

    /**
     * @inheritDoc
     */
    public function getClobTypeDeclarationSQL(array $field)
    {
        // TODO: Implement getClobTypeDeclarationSQL() method.
    }

    /**
     * @inheritDoc
     */
    public function getBlobTypeDeclarationSQL(array $field)
    {
        // TODO: Implement getBlobTypeDeclarationSQL() method.
    }

    /**
     * @inheritDoc
     */
    public function getVarcharTypeDeclarationSQL(array $field)
    {
        return parent::getVarcharTypeDeclarationSQL($field); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getBinaryTypeDeclarationSQL(array $field)
    {
        return parent::getBinaryTypeDeclarationSQL($field); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getGuidTypeDeclarationSQL(array $field)
    {
        return parent::getGuidTypeDeclarationSQL($field); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getJsonTypeDeclarationSQL(array $field)
    {
        return 'JSON';
    }

    /**
     * @inheritDoc
     */
    protected function getVarcharTypeDeclarationSQLSnippet($length, $fixed)
    {
        parent::getVarcharTypeDeclarationSQLSnippet($length, $fixed); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function getBinaryTypeDeclarationSQLSnippet($length, $fixed)
    {
        parent::getBinaryTypeDeclarationSQLSnippet($length, $fixed); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function initializeDoctrineTypeMappings()
    {
        // TODO: Implement initializeDoctrineTypeMappings() method.
    }

    /**
     * @inheritDoc
     */
    public function registerDoctrineTypeMapping($dbType, $doctrineType)
    {
        parent::registerDoctrineTypeMapping($dbType, $doctrineType); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDoctrineTypeMapping($dbType)
    {
        return parent::getDoctrineTypeMapping($dbType); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function hasDoctrineTypeMappingFor($dbType)
    {
        return parent::hasDoctrineTypeMappingFor($dbType); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function initializeCommentedDoctrineTypes()
    {
        parent::initializeCommentedDoctrineTypes(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function isCommentedDoctrineType(Type $doctrineType)
    {
        return parent::isCommentedDoctrineType($doctrineType); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function markDoctrineTypeCommented($doctrineType)
    {
        parent::markDoctrineTypeCommented($doctrineType); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDoctrineTypeComment(Type $doctrineType)
    {
        return parent::getDoctrineTypeComment($doctrineType); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function getColumnComment(Column $column)
    {
        return parent::getColumnComment($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getIdentifierQuoteCharacter()
    {
        return parent::getIdentifierQuoteCharacter(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getSqlCommentStartString()
    {
        return parent::getSqlCommentStartString(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getSqlCommentEndString()
    {
        return parent::getSqlCommentEndString(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getVarcharMaxLength()
    {
        return parent::getVarcharMaxLength(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getVarcharDefaultLength()
    {
        return parent::getVarcharDefaultLength(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getBinaryMaxLength()
    {
        return parent::getBinaryMaxLength(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getBinaryDefaultLength()
    {
        return parent::getBinaryDefaultLength(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getWildcards()
    {
        return parent::getWildcards(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getRegexpExpression()
    {
        parent::getRegexpExpression(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getGuidExpression()
    {
        parent::getGuidExpression(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getAvgExpression($column)
    {
        return parent::getAvgExpression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getCountExpression($column)
    {
        return parent::getCountExpression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getMaxExpression($column)
    {
        return parent::getMaxExpression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getMinExpression($column)
    {
        return parent::getMinExpression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getSumExpression($column)
    {
        return parent::getSumExpression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getMd5Expression($column)
    {
        return parent::getMd5Expression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getLengthExpression($column)
    {
        return parent::getLengthExpression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getSqrtExpression($column)
    {
        return parent::getSqrtExpression($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getRoundExpression($column, $decimals = 0)
    {
        return parent::getRoundExpression($column, $decimals); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getModExpression($expression1, $expression2)
    {
        return parent::getModExpression($expression1, $expression2); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getTrimExpression($str, $mode = TrimMode::UNSPECIFIED, $char = false)
    {
        return parent::getTrimExpression($str, $mode, $char); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getRtrimExpression($str)
    {
        return parent::getRtrimExpression($str); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getLtrimExpression($str)
    {
        return parent::getLtrimExpression($str); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getUpperExpression($str)
    {
        return parent::getUpperExpression($str); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getLowerExpression($str)
    {
        return parent::getLowerExpression($str); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getLocateExpression($str, $substr, $startPos = false)
    {
        parent::getLocateExpression($str, $substr, $startPos); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getNowExpression()
    {
        return parent::getNowExpression(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getSubstringExpression($value, $from, $length = null)
    {
        return parent::getSubstringExpression($value, $from, $length); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getConcatExpression()
    {
        return parent::getConcatExpression(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getNotExpression($expression)
    {
        return parent::getNotExpression($expression); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getIsNullExpression($expression)
    {
        return parent::getIsNullExpression($expression); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getIsNotNullExpression($expression)
    {
        return parent::getIsNotNullExpression($expression); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getBetweenExpression($expression, $value1, $value2)
    {
        return parent::getBetweenExpression($expression, $value1, $value2); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getAcosExpression($value)
    {
        return parent::getAcosExpression($value); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getSinExpression($value)
    {
        return parent::getSinExpression($value); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getPiExpression()
    {
        return parent::getPiExpression(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getCosExpression($value)
    {
        return parent::getCosExpression($value); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateDiffExpression($date1, $date2)
    {
        parent::getDateDiffExpression($date1, $date2); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddSecondsExpression($date, $seconds)
    {
        return parent::getDateAddSecondsExpression($date, $seconds); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubSecondsExpression($date, $seconds)
    {
        return parent::getDateSubSecondsExpression($date, $seconds); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddMinutesExpression($date, $minutes)
    {
        return parent::getDateAddMinutesExpression($date, $minutes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubMinutesExpression($date, $minutes)
    {
        return parent::getDateSubMinutesExpression($date, $minutes); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddHourExpression($date, $hours)
    {
        return parent::getDateAddHourExpression($date, $hours); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubHourExpression($date, $hours)
    {
        return parent::getDateSubHourExpression($date, $hours); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddDaysExpression($date, $days)
    {
        return parent::getDateAddDaysExpression($date, $days); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubDaysExpression($date, $days)
    {
        return parent::getDateSubDaysExpression($date, $days); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddWeeksExpression($date, $weeks)
    {
        return parent::getDateAddWeeksExpression($date, $weeks); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubWeeksExpression($date, $weeks)
    {
        return parent::getDateSubWeeksExpression($date, $weeks); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddMonthExpression($date, $months)
    {
        return parent::getDateAddMonthExpression($date, $months); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubMonthExpression($date, $months)
    {
        return parent::getDateSubMonthExpression($date, $months); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddQuartersExpression($date, $quarters)
    {
        return parent::getDateAddQuartersExpression($date, $quarters); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubQuartersExpression($date, $quarters)
    {
        return parent::getDateSubQuartersExpression($date, $quarters); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateAddYearsExpression($date, $years)
    {
        return parent::getDateAddYearsExpression($date, $years); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateSubYearsExpression($date, $years)
    {
        return parent::getDateSubYearsExpression($date, $years); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function getDateArithmeticIntervalExpression($date, $operator, $interval, $unit)
    {
        parent::getDateArithmeticIntervalExpression(
            $date,
            $operator,
            $interval,
            $unit
        ); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getBitAndComparisonExpression($value1, $value2)
    {
        return parent::getBitAndComparisonExpression($value1, $value2); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getBitOrComparisonExpression($value1, $value2)
    {
        return parent::getBitOrComparisonExpression($value1, $value2); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getForUpdateSQL()
    {
        return parent::getForUpdateSQL(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function appendLockHint($fromClause, $lockMode)
    {
        return parent::appendLockHint($fromClause, $lockMode); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getReadLockSQL()
    {
        return parent::getReadLockSQL(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getWriteLockSQL()
    {
        return parent::getWriteLockSQL(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDropDatabaseSQL($database)
    {
        DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getDropTableSQL($table)
    {
        DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getDropTemporaryTableSQL($table)
    {
        DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getDropIndexSQL($index, $table = null)
    {
        DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getDropConstraintSQL($constraint, $table)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getDropForeignKeySQL($foreignKey, $table)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCreateTableSQL(Table $table, $createFlags = self::CREATE_INDEXES)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCommentOnColumnSQL($tableName, $columnName, $comment)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    protected function _getCreateTableSQL($tableName, array $columns, array $options = [])
    {
        return parent::_getCreateTableSQL($tableName, $columns, $options); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getCreateTemporaryTableSnippetSQL()
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCreateConstraintSQL(Constraint $constraint, $table)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCreateIndexSQL(Index $index, $table)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    protected function getPartialIndexSQL(Index $index)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    protected function getCreateIndexSQLFlags(Index $index)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCreatePrimaryKeySQL(Index $index, $table)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCreateForeignKeySQL(ForeignKeyConstraint $foreignKey, $table)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getAlterTableSQL(TableDiff $diff)
    {
        parent::getAlterTableSQL($diff); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    protected function getPreAlterTableIndexForeignKeySQL(TableDiff $diff)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    protected function getPostAlterTableIndexForeignKeySQL(TableDiff $diff)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    protected function getRenameIndexSQL($oldIndexName, Index $index, $tableName)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    protected function _getAlterTableIndexForeignKeySQL(TableDiff $diff)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getColumnDeclarationListSQL(array $fields)
    {
        return parent::getColumnDeclarationListSQL($fields); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getColumnDeclarationSQL($name, array $field)
    {
        return parent::getColumnDeclarationSQL($name, $field); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDecimalTypeDeclarationSQL(array $columnDef)
    {
        return parent::getDecimalTypeDeclarationSQL($columnDef); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDefaultValueDeclarationSQL($field)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCheckDeclarationSQL(array $definition)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getUniqueConstraintDeclarationSQL($name, Index $index)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getIndexDeclarationSQL($name, Index $index)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCustomTypeDeclarationSQL(array $columnDef)
    {
        return parent::getCustomTypeDeclarationSQL($columnDef); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getIndexFieldDeclarationListSQL(array $fields)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getTemporaryTableSQL()
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getTemporaryTableName($tableName)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getForeignKeyDeclarationSQL(ForeignKeyConstraint $foreignKey)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getAdvancedForeignKeyOptionsSQL(ForeignKeyConstraint $foreignKey)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getForeignKeyReferentialActionSQL($action)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getForeignKeyBaseDeclarationSQL(ForeignKeyConstraint $foreignKey)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getUniqueFieldDeclarationSQL()
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getColumnCharsetDeclarationSQL($charset)
    {
        return parent::getColumnCharsetDeclarationSQL($charset); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function convertBooleans($item)
    {
        return parent::convertBooleans($item); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function convertFromBoolean($item)
    {
        return parent::convertFromBoolean($item); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function convertBooleansToDatabaseValue($item)
    {
        return parent::convertBooleansToDatabaseValue($item); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getCurrentDateSQL()
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function getCurrentTimeSQL()
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * http://sphinxsearch.com/docs/current.html#date-time-functions
     * @inheritDoc
     */
    public function getCurrentTimestampSQL()
    {
        return 'NOW()';
    }

    /**
     * http://sphinxsearch.com/docs/current.html#sphinxql-show-databases
     * @inheritDoc
     */
    public function getListDatabasesSQL()
    {
        return 'SHOW DATABASES'; //supported, but does absolutely nothing
    }

    /**
     * http://sphinxsearch.com/docs/current.html#sphinxql-describe
     * @inheritDoc
     */
    public function getListTableColumnsSQL($table, $database = null)
    {
        //return 'DESC '.$table;
        return 'DESCRIBE '.$table;
    }

    /**
     * http://sphinxsearch.com/docs/current.html#sphinxql-show-tables
     * @inheritDoc
     */
    public function getListTablesSQL()
    {
        return 'SHOW TABLES';
    }

    /**
     * http://sphinxsearch.com/docs/current.html#sphinxql-set-transaction
     * @inheritDoc
     */
    public function getSetTransactionIsolationSQL($level)
    {
        //return 'SET SESSION TRANSACTION ISOLATION LEVEL ' . $this->_getTransactionIsolationLevelSQL($level); //mysql like
        return 'SET TRANSACTION ISOLATION LEVEL ' . $this->_getTransactionIsolationLevelSQL($level); //Supported, but does absolutely nothing
    }

    /**
     * @inheritDoc
     */
    public function getDateTimeTypeDeclarationSQL(array $fieldDeclaration)
    {
        parent::getDateTimeTypeDeclarationSQL($fieldDeclaration); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateTimeTzTypeDeclarationSQL(array $fieldDeclaration)
    {
        return parent::getDateTimeTzTypeDeclarationSQL($fieldDeclaration); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateTypeDeclarationSQL(array $fieldDeclaration)
    {
        parent::getDateTypeDeclarationSQL($fieldDeclaration); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getTimeTypeDeclarationSQL(array $fieldDeclaration)
    {
        parent::getTimeTypeDeclarationSQL($fieldDeclaration); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getFloatDeclarationSQL(array $fieldDeclaration)
    {
        return parent::getFloatDeclarationSQL($fieldDeclaration); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function supportsIndexes()
    {
        return false;
    }

    /**
     * @inheritDoc
     */
    public function supportsSavepoints()
    {
        return false;
    }

    /**
     * @inheritDoc
     */
    public function supportsPrimaryConstraints()
    {
        //todo технически первичного ключа нет, но к id предъявляется ряд требований как к primary
        return parent::supportsPrimaryConstraints();
    }

    /**
     * @inheritDoc
     */
    public function supportsForeignKeyConstraints()
    {
        return false;
    }

    /**
     * @inheritDoc
     */
    public function supportsCreateDropDatabase()
    {
        return false;
    }

    /**
     * @inheritDoc
     */
    public function hasNativeJsonType()
    {
        return true;
    }

    /**
     * @inheritDoc
     */
    public function getIdentityColumnNullInsertSQL()
    {
        return parent::getIdentityColumnNullInsertSQL(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function supportsViews()
    {
        return false;
    }

    /**
     * @inheritDoc
     */
    public function getDateTimeFormatString()
    {
        return parent::getDateTimeFormatString(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateTimeTzFormatString()
    {
        return parent::getDateTimeTzFormatString(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getDateFormatString()
    {
        return parent::getDateFormatString(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getTimeFormatString()
    {
        return parent::getTimeFormatString(); // TODO: Change the autogenerated stub
    }

    /**
     * http://sphinxsearch.com/docs/current.html#sphinxql-select
     * @inheritDoc
     */
    protected function doModifyLimitQuery($query, $limit, $offset)
    {
        if ($limit === null) {
            $limit = PHP_INT_MAX - 1;
        }
        if ($offset === null) {
            $offset = 0;
        }
        $query .= 'LIMIT '.$limit.', '.$offset;

        return $query;
    }

    /**
     * @inheritDoc
     */
    public function getSQLResultCasing($column)
    {
        return parent::getSQLResultCasing($column); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function fixSchemaElementName($schemaElementName)
    {
        return parent::fixSchemaElementName($schemaElementName); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function getMaxIdentifierLength()
    {
        return parent::getMaxIdentifierLength(); // TODO: Change the autogenerated stub
    }

    /**
     * http://sphinxsearch.com/docs/current.html#conf-sql-query
     * @inheritDoc
     */
    public function getEmptyIdentityInsertSQL($tableName, $identifierColumnName)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * http://sphinxsearch.com/docs/current.html#sphinxql-truncate-rtindex
     * @inheritDoc
     */
    public function getTruncateTableSQL($tableName, $cascade = false)
    {
        $tableIdentifier = new Identifier($tableName);

        return 'TRUNCATE RTINDEX ' . $tableIdentifier->getQuotedName($this);
    }

    /**
     * @inheritDoc
     */
    public function createSavePoint($savepoint)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function releaseSavePoint($savepoint)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * @inheritDoc
     */
    public function rollbackSavePoint($savepoint)
    {
        throw DBALException::notSupported(__METHOD__);
    }

    /**
     * Mysql variant
     * @inheritDoc
     */
    public function quoteStringLiteral($str)
    {
        $str = str_replace('\\', '\\\\', $str); // MySQL requires backslashes to be escaped aswell.

        return parent::quoteStringLiteral($str);
    }

}
